<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:security="http://www.springframework.org/schema/security" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
  		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
  		http://www.springframework.org/schema/security 
  		http://www.springframework.org/schema/security/spring-security-3.2.xsd" >
  		
 	
  	<!--  
  	<security:http pattern="/common/**" security="none"></security:http>
  	<security:http pattern="/demo/**" security="none"></security:http>
  	<security:http pattern="/index.jsp" security="none"></security:http>
  	<security:http pattern="/" security="none"></security:http>
  	-->
  	
  	<!-- 静态资源文件不过滤    -->
  	<security:http pattern="/static/**" security="none"></security:http>
  	<security:http pattern="/template/**" security="none"></security:http>
  	
	<!-- 登录页不过滤 -->
  	<security:http pattern="/login*" security="none"></security:http>
  <!-- 	<security:http pattern="/api/**" security="none"></security:http> -->

	<security:http pattern="**.ico" security="none"></security:http>

	<!-- <http>标签不能配置auto-config，因为这样配置后，依然会采用spring security的Filter Chain会与下面配的custom-filter冲突 -->
  	<security:http use-expressions="true" auto-config="false" entry-point-ref="authenticationProcessingFilterEntryPoint" access-denied-page="/accessDenied.jsp">
		<!-- 实现免登陆验证，cookie保存两个星期 
		<security:remember-me services-ref="rememberMeServices"/>
		-->	
		<!-- 单账号并发登录策略 -->
		<security:session-management session-authentication-strategy-ref="sessionAuthenticationStrategy" invalid-session-url="/login.do" />
		<security:custom-filter ref="concurrencyFilter" position="CONCURRENT_SESSION_FILTER" />
		<!-- position表示替换掉Spring Security原来默认的登录验证Filter -->
		<security:custom-filter ref="myLoginFilter" position="FORM_LOGIN_FILTER" />
		<!-- position表示替换掉Spring Security原来默认的退出Filter -->
		<security:custom-filter ref="myLogoutFilter" position="LOGOUT_FILTER" />
		<!-- 自定义认证过滤器在spring security默认过滤器FILTER_SECURITY_INTERCEPTOR之前 -->
		<security:custom-filter ref="mySecurityFilter" before="FILTER_SECURITY_INTERCEPTOR" />
  	</security:http>
  	
  	<!-- 未登录的切入点 -->  
    <bean id="authenticationProcessingFilterEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">  
        <property name="loginFormUrl" value="/login.do"></property>
    </bean>

  	
  	<!-- 单账号登录控制 -->
  	<bean id="concurrencyFilter" class="org.springframework.security.web.session.ConcurrentSessionFilter">
  		<property name="sessionRegistry" ref="sessionRegistry"></property>
  		<property name="expiredUrl" value="/login.do"></property>
  	</bean>
  	
	<bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl"></bean>

	<!-- 登录认证 -->
	<bean id="myLoginFilter" class="com.basic.framework.security.MyUsernamePasswordAuthenticationFilter">
		<!-- 处理登录 -->
		<property name="filterProcessesUrl" value="/login/login"></property>
		<!-- 验证成功后的处理 -->
		<property name="authenticationSuccessHandler">
			<bean class="com.basic.framework.security.MySavedRequestAwareAuthenticationSuccessHandler">
				<!-- 登录成功后默认地址 -->
				<property name="defaultTargetUrl" value="/index.do"></property>
			</bean>
		</property>
		<!-- 验证失败后的处理 -->
		<property name="authenticationFailureHandler">
			<bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
				<!-- 登录失败默认跳转 -->
				<property name="defaultFailureUrl" value="/login.do"></property>
			</bean>
		</property>
		<property name="authenticationManager" ref="myAuthenticationManager"></property>
		<property name="rememberMeServices" ref="rememberMeServices"></property>
		<property name="sessionAuthenticationStrategy" ref="sessionAuthenticationStrategy"></property>
	</bean>
	
  	<!-- 记住我,自动登录认证 -->
  	<bean id="rememberMeServices" class="org.springframework.security.web.authentication.rememberme.PersistentTokenBasedRememberMeServices">
  		<property name="userDetailsService" ref="myUserDetailService"></property>
  		<!-- 为remember me cookie定义一个唯一的key值，以与我们的应用关联 -->
  		<property name="key" value="RUIZHI-SECURITY-RMKEY_t8ek8xyjZEKasgL7GpMw5wUf4NKvcRLfrpZY"></property>
  		<property name="tokenValiditySeconds" value="1209600"></property>
  		<property name="tokenRepository" ref="rememberMeTokenRepository"/>
  		<property name="parameter" value="remember-me"></property>
  	</bean>
	<bean id="rememberMeTokenRepository" class="org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl">
		<property name="dataSource" ref="dataSource" />
	</bean> 
  	<bean id="rememberMeAuthenticationProvider" class="org.springframework.security.authentication.RememberMeAuthenticationProvider">
  		<property name="key" value="RUIZHI-SECURITY-RMKEY_t8ek8xyjZEKasgL7GpMw5wUf4NKvcRLfrpZY"></property>
  	</bean>
  	
	<bean id="sessionAuthenticationStrategy" class="org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy">
					<constructor-arg ref="sessionRegistry" />
					<property name="maximumSessions" value="1" />
				</bean>
				<bean class="org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy">
				</bean>
				<bean class="org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy">
					<constructor-arg ref="sessionRegistry" />
				</bean>
			</list>
		</constructor-arg>
	</bean>

	<!-- 退出 -->
	<bean id="myLogoutFilter" class="com.basic.framework.security.MyLogoutFilter">
		<!-- 处理退出 -->
		<property name="filterProcessesUrl" value="/logout.do" />
		<!-- 退出处理成功后的默认显示url -->
		<constructor-arg index="0" value="/login.do" />
		<constructor-arg index="1">
			<!-- 退出成功后的handler列表，可以添加自定义LogoutHandler实现类 -->
			<list>
				<bean class="com.basic.framework.security.MyLogoutHandler"></bean>
				<!-- 清除Cookie -->
				<ref bean="rememberMeServices"/>
				<!-- 默认清楚验证 -->
				<bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"></bean>
			</list>
		</constructor-arg>
	</bean>

	<!-- 用户详情 -->  
	<bean id="myUserDetailService" class="com.basic.framework.security.MyUserDetailsService">
		<property name="userService" ref="userServiceWeb"/>
		<property name="privateService" ref="privateServiceWeb"/>
		<property name="roleService" ref="roleServiceWeb"/>
	</bean>

	<bean id="mySavedRequestAwareAuthenticationSuccessHandler" class="com.basic.framework.security.MySavedRequestAwareAuthenticationSuccessHandler">
		<property name="userService" ref="userServiceWeb"/>
	</bean>
	
	<!-- 认证管理器，可配置多个AuthenticationProvider -->
    <security:authentication-manager alias="myAuthenticationManager" erase-credentials="false">
    	<!-- Spring Security将会按照顺序，依次从上向下调用所有Provider，只要任何一个Provider校验通过，整个认证将通过。 -->
        <security:authentication-provider ref="myAuthenticationProvider"></security:authentication-provider>
        <security:authentication-provider ref="rememberMeAuthenticationProvider"></security:authentication-provider>
    </security:authentication-manager>
    
    
    <!-- 替换user-service-ref方式的AuthenticationProvider -->
    <bean id="myAuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
    	<property name="userDetailsService" ref="myUserDetailService"></property>
    	<!-- 默认为true隐藏后台正常的异常 -->
    	<property name="hideUserNotFoundExceptions" value="false"></property>
    	<!-- 使用MD5加密-->
    	<property name="passwordEncoder" ref="md5PasswordEncoder"></property>
    	<!-- 登录账号做为盐值，username为org.springframework.security.core.userdetails.User属性 -->
		<!--
		<property name="saltSource">
    		<bean class="org.springframework.security.authentication.dao.ReflectionSaltSource">
    			<property name="userPropertyToUse" value="username"></property>
    		</bean>
    	</property>
    	-->
    </bean>

    <!-- 用户的密码加密或解密 -->
	<bean id="md5PasswordEncoder" class="com.basic.framework.security.MyPasswordEncoder"></bean>
	<!-- 授权过滤器 -->
	<bean id="mySecurityFilter" class="com.basic.framework.security.MySecurityFilter">
		<!-- 用户拥有的权限 -->
		<property name="authenticationManager" ref="myAuthenticationManager">
		</property>
		<!-- 用户是否拥有所请求资源的权限 -->
		<property name="accessDecisionManager">
			<bean class="com.basic.framework.security.MyAccessDecisionManager"></bean>
		</property>
		<!-- 资源与权限对应关系 -->
		<property name="securityMetadataSource" ref="mySecurityMetadataSource"/>

	</bean>

	<bean id = "mySecurityMetadataSource" class="com.basic.framework.security.MySecurityMetadataSource">
		<property name="privateService" ref="privateServiceWeb"/>
	</bean>

	<bean id = "privateServiceWeb" class="com.basic.framework.web.impl.PrivateServiceImpl"/>

	<bean id = "userServiceWeb" class="com.basic.framework.web.impl.UserServiceImpl"/>

	<bean id = "roleServiceWeb" class="com.basic.framework.web.impl.RoleServiceImpl"/>

  	<!-- 国际化 -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>classpath:config/properties/i18n/messages_zh_CN</value>
			</list>
		</property>
	</bean>

	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver" />
  	
</beans>